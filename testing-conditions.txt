
1. From Consolidation to Publish
    1) Wherever Custom columns are filtered, make sure they are filtere by FieldCategory instead of name or Column name or DisplayColumnName.

2. Consolidation
    1) Spend Normalization child popup:
    GEP Norm Spend columns are expected.

3. Before merging committing or merging your code, scan through all plugins to check for any filters applied on main table columns.

4. We have to remove unused columns specially custom columns.
BE CAREFUL!!!!!!!!

5. 

Plugins per circle:
1. Consolidation
    1) spend-consolidate-add-master-based-normalization-lib
    2) spend-consolidate-cleanse-main-lib
    3) spend-consolidate-exclusion-list-popup-lib
    4) spend-consolidate-master-based-normalization-lib
    5) spend-consolidate-normalization-lib
    6) spend-consolidate-system-defined-edit-lib
    7) spend-consolidate-system-defined-lib
    8) spend-consolidate-user-def-query-child-lib
    9) spend-consolidate-user-def-query-parent-lib
    10) spend-date-normalization-lib
    11) spend-execlusion-lib
    12) spend-moving-main-table-edit-lib
    13) spend-moving-to-main-table-lib
    14) spend-normalization-lib
    
Review of stories:
https://smartbygep.atlassian.net/browse/SSDL-4223

1. Find all references of GetMainTableColumn() and change accordingly
2. Find all references to BAO/DAO methods responsible for retrieving main table columns and change them accordingly.
    a) ProfileBAO/ProfileDAO -> GetMainTableColumns
        Used in :
        1) SpendCubeRefreshBAO -> GetFeedbackSsdlColumnMapping
    b) 

3. Examples of getting Main table columns
Safe dependencies:
    a) ProfileDAO
        1) GetMainTableColumns
        2) GetAllMainTableColumns
        3) GetAllTableColumns
    b) ProfileBAO
        1) GetMainTableColumns - No change
        2) GetAllMainTableColumns - Done - 5 references replaced with new code
            References:
            2.1) ActivityConfigurationBAO.cs
            2.2) ClassfyAIBAO.cs
            2.3) ConsolidationWorkflowBAO.cs
            2.4) ProfileSplitConfigurationBAO.cs
            2.5) PublishCubeSplitConfigurationBAO.cs

        3) GetAllTableColumns - No change
    c) ImportUtilityBAO - Done
        1) GetAllTableColumns - connected with TableDAO.GetAllTablesAndColumns
    d) TableDAO - Done
        1) GetAllTablesAndColumns

Dangerous dependencies:
    a) SpendCubeRefreshBAO - DANGER
        1) GetFeedbackSsdlColumnMapping
    b) ActivityConfigurationBAO
        1) GetSupplierClusteringColumn
        2) GetClassifyClusteringColumn
    c) ClassfyAIBAO
        1) GetSupplierClusteringColumn
        2) GetClassifyClusteringColumn
    d) ProfileSplitConfigurationBAO
        1) GetSupplierClusteringColumn
        2) GetClassifyClusteringColumn
    e) PublishCubeSplitConfigurationBAO
        1) GetSupplierClusteringColumn
        2) GetClassifyClusteringColumn
    f) ProjectSetupBAO - DANGER
        1) GetDataLakeMapping - connected with ProjectSetupDAO.GetMainTableColumns
    g) ProjectSetupDAO - DANGER
        1) GetMainTableColumns

Write a query to identify all columns of OPS_MAIN that are being used in workflows and utilities but are not active.

Scan C# and Angular and SQL for all places where CUSTOM_FIELD is being filtered.

Pending stories/tasks:
https://smartbygep.atlassian.net/browse/SSDL-11141
https://smartbygep.atlassian.net/browse/SSDL-11146
https://smartbygep.atlassian.net/browse/SSDL-9975
https://smartbygep.atlassian.net/browse/SSDL-10895
https://smartbygep.atlassian.net/browse/SSDL-6433
https://smartbygep.atlassian.net/browse/SSDL-10535

Special conditions to filter out main table columns:
1. Spend Normalization needs GEP_NORM_SPEND_ columns
2. Publish - one time flag displays only Nvarchar data type while creating custom columns.
3. Exclusion summary - ignores GEP_EXCLUDE column
4. Classify through rules - hard code columns are:
    a) GEP_CATEGORY_CODE, GEP_AI_SOURCE_CF, GEP_CF_SOURCE, GEP_CF_SOURCE_2, GEP_RULE_ID
    b) Uses columns that either match GEP_ or CUSTOM_
5. spend-Normalization-historical-data
    a) Uses columns that match either GEP_ULT_PARENT OR GEP_NORM_SUPP_NAME
6. Normalization through AI
    a) Uses columns that either match GEP_ or CUSTOM_
7. ps-classification-clustering
    a) Uses that match GEP_NORM_SPEND and should not end with WITHOUT_TAX
    b) Uses GEP_
8. ps-supplier-normalization-clustering
    a) Uses that match GEP_NORM_SPEND and should not end with WITHOUT_TAX
    b) Uses GEP_
9. rule-configuration.ts
    a) hard coded: GEP_Reviewer_Status, GEP_Reviewer_Comments, OLD_GEP_NORM_SUPP_NAME, OLD_GEP_ULT_PARENT, GEP_NORM_SUPP_NAME_OPERATOR, GEP_NORM_SUPP_NAME_VALUE, GEP_ULT_PARENT_OPERATOR, GEP_ULT_PARENT_VALUE
10. Vne-configure-stage
    a) hard coded: GEP_NORM_SUPP_NAME
11. spend-vne-generate
    a) hard coded: GEP_NORM_SUPP_NAME, GEP_VNE_HISTORICAL_FLAG, GEP_VNE_SOURCE,
    GEP_VNE_SOURCE_2, GEP_AI_SOURCE_VNE, GEP_ULT_PARENT, GEP_UP_HISTORICAL_FLAG,
    GEP_UP_SOURCE, GEP_UP_SOURCE_2, GEP_AI_SOURCE_UP, GEP_UP_STATUS_FLAG, GEP_VNE_STATUS_FLAG
12. vne-rules-popup
    a) Uses columns that either match GEP_ or CUSTOM_
    b) hard coded : GEP_ULT_PARENT, GEP_UP_SOURCE, GEP_NORM_SUPP_NAME, GEP_VNE_SOURCE, GEP_VNE_SOURCE_2, GEP_AI_SOURCE_VNE, GEP_ULT_PARENT, GEP_UP_SOURCE, GEP_UP_SOURCE_2, GEP_AI_SOURCE_UP, GEP_RULE_ID
14. trendcheck-table
    a) hard coded: GEP_NORM_SPEND
15. AIfields
    a) hard coded: GEP_NORM_SUPP_NAME, GEP_VNE_SOURCE, GEP_VNE_SOURCE_2, GEP_AI_SOURCE_VNE, GEP_ULT_PARENT, GEP_UP_SOURCE, GEP_UP_SOURCE_2, GEP_AI_SOURCE_UP
    